name: Frontend CI/CD

on:
  push:
    branches: [main, master, development]
  pull_request:
    branches: [main, master, development]

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup Next.js build cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/frontend/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-
            
      - name: Install Dependencies
        run: pnpm install || pnpm install --no-frozen-lockfile

      - name: Lint Check
        run: pnpm lint || echo "Linting issues found"

      - name: Build
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}
          NEXT_PUBLIC_REDIS_URL: ${{ secrets.NEXT_PUBLIC_REDIS_URL }}

      - name: Create deployment package
        run: |
          mkdir -p deployment
          # Salin build output
          cp -r .next deployment/
          cp -r public deployment/
          
          # Salin file konfigurasi
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp next.config.mjs deployment/
          cp ecosystem.config.js deployment/ || true
          
          # Salin kode sumber dan direktori penting
          cp -r app deployment/ || true
          cp -r components deployment/ || true
          cp -r contexts deployment/ || true
          cp -r hooks deployment/ || true
          cp -r i18n deployment/ || true
          cp -r intl deployment/ || true
          cp -r lib deployment/ || true
          cp -r styles deployment/ || true
          cp -r middleware.ts deployment/ || true
          
          # Tambahan file penting lain jika ada
          cp .env.production deployment/.env || true
          cp .env deployment/ || true
          cp .npmrc deployment/ || true
          
          tar -czf deployment.tar.gz deployment
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/deployment.tar.gz
          retention-days: 1
          
  deploy:
    needs: build-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Deploy to production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deployment.tar.gz"
          target: "/tmp"

      - name: Setup deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Hapus folder temporary jika ada
            rm -rf /var/www/rosantibike/frontend-deploy-temp || true
            mkdir -p /var/www/rosantibike/frontend-deploy-temp
            tar -xzf /tmp/deployment.tar.gz -C /var/www/rosantibike/frontend-deploy-temp
            cd /var/www/rosantibike/frontend-deploy-temp/deployment
            pnpm install --prod || pnpm install --prod --no-frozen-lockfile
            
            # Backup current version and swap with new version
            if [ -d "/var/www/rosantibike/frontend" ]; then
              mv /var/www/rosantibike/frontend /var/www/rosantibike/backups/frontend-backup-$(date +%Y%m%d%H%M%S)
            fi
            
            mkdir -p /var/www/rosantibike/frontend
            cp -r ./* /var/www/rosantibike/frontend/
            cp -r ./.next /var/www/rosantibike/frontend/ || true
            
            # Restart atau buat proses PM2 jika belum ada
            cd /var/www/rosantibike/frontend
            if pm2 list | grep -q "rental-frontend"; then
              pm2 restart rental-frontend --update-env
            else
              pm2 start ecosystem.config.js
            fi
            
            # Bersihkan folder temporary dan file artifacts
            rm -rf /var/www/rosantibike/frontend-deploy-temp
            rm -f /tmp/deployment.tar.gz 