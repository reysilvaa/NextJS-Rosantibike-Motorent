name: Deploy Frontend

on:
  push:
    branches: [ master ]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Step 3: Setup SSH key and known hosts
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    # Step 4: Backup current deployment
    - name: Backup current deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /var/www/rosantibike/frontend
          if [ -d ".next" ]; then
            tar -czf backup_$(date +%Y%m%d_%H%M%S).tar.gz .next
            mv backup_*.tar.gz /var/www/backups/
          fi

    # Step 5: Deploy new version
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to project directory
          cd /var/www/rosantibike/frontend
          
          # Pull latest changes
          git fetch origin master
          git reset --hard origin/master
          
          # Install dependencies
          echo "Installing dependencies..."
          npm ci --production
          
          # Build application
          echo "Building application..."
          npm run build
          
          # Restart application
          echo "Restarting application..."
          if pm2 list | grep -q "rental-frontend"; then
            pm2 restart rental-frontend
          else
            pm2 start npm --name "rental-frontend" -- start
          fi
          
          # Save PM2 process list
          pm2 save
          
          # Log deployment
          echo "Deployment completed at $(date)" >> /var/www/rosantibike/deploy.log

    # Step 6: Verify deployment
    - name: Verify deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Check if application is running
          if pm2 list | grep -q "rental-frontend" && pm2 list | grep "rental-frontend" | grep -q "online"; then
            echo "Application is running successfully"
            exit 0
          else
            echo "Application failed to start"
            exit 1
          fi

    # Step 7: Cleanup old backups
    - name: Cleanup old backups
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Keep only last 5 backups
          cd /var/www/backups
          ls -t backup_*.tar.gz | tail -n +6 | xargs -r rm 